# .bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
    . /etc/bashrc
fi

# User specific aliases and functions
if [ -f ~/.bash_aliases ]; then
  . ~/.bash_aliases
fi


# One-time setup stuff because of:
# - variable appending
# - run-once specific
if [ -z "${PURG_BASH_ACTIVE}" ]
then
  # Git safety
  export GIT_CEILING_DIRECTORIES="${HOME}"

  # CUDA Toolkit
  export PATH=/usr/local/cuda/bin:${PATH}
  export LD_LIBRARY_PATH=/usr/local/cuda/lib64:/usr/local/cuda/lib:${LD_LIBRARY_PATH}
  export C_INCLUDE_PATH=/usr/local/cuda/include:${C_INCLUDE_PATH}
  export CPLUS_INCLUDE_PATH=/usr/local/cuda/include:${CPLUS_INCLUDE_PATH}

  # Opt install root
  export PATH=/opt/local/bin:${PATH}
  export LD_LIBRARY_PATH=/opt/local/lib64:/opt/local/lib:${LD_LIBRARY_PATH}
  export MANPATH=/opt/local/share/man:${MANPATH}
  export C_INCLUDE_PATH=/opt/local/include:${C_INCLUDE_PATH}
  export CPLUS_INCLUDE_PATH=/opt/local/include:${CPLUS_INCLUDE_PATH}

  # Home install root
  export PATH=${HOME}/.local/bin:${PATH}
  export LD_LIBRARY_PATH=${HOME}/.local/lib64:${HOME}/.local/lib:${LD_LIBRARY_PATH}
  export MANPATH=${HOME}/.local/share/man:${MANPATH}
  export C_INCLUDE_PATH=${HOME}/.local/include:${C_INCLUDE_PATH}
  export CPLUS_INCLUDE_PATH=${HOME}/.local/include:${CPLUS_INCLUDE_PATH}

  #
  # Sonar-scanner
  #
  if [[ -d "${HOME}/sonar-scanner-4.6.2.2472-linux/bin" ]]
  then
    export PATH=${HOME}/sonar-scanner-4.6.2.2472-linux/bin:${PATH}
  fi

  #
  # Android setup (if installed)
  #
  EXPECTED_ANDROID_HOME="${HOME}/Android/Sdk"
  if [ -d "${EXPECTED_ANDROID_HOME}" ]
  then
    export ANDROID_HOME=${EXPECTED_ANDROID_HOME}
    export PATH=${ANDROID_HOME}/tools/bin:${ANDROID_HOME}/platform-tools:${PATH}
  fi

  EXPECTED_ANDROID_NDK_HOME="${ANDROID_HOME}/ndk-bundle"
  if [ -d "${EXPECTED_ANDROID_NDK_HOME}" ]
  then
    export ANDROID_NDK_HOME=${EXPECTED_ANDROID_NDK_HOME}
    export PATH=${ANDROID_NDK_HOME}:${PATH}
  fi

  export PURG_BASH_ACTIVE=1
fi  # PURG_BASH_ACTIVE


#
# Constant Variables
#
export EDITOR=vim
export LESS="RM"

export VAGRANT_DEFAULT_PROVIDER=virtualbox

#export TERM=xterm-256color


# After this, we only setup things meant for interactive consoles
if [[ $- = *i* ]]; then
  #
  # Bash options and behavior
  #
  # -- History controls
  # Don't put duplicate lines or lines starting with a space in the history.
  HISTCONTROL=ignoreboth
  # Append to hist instead of overwriting.
  shopt -s histappend
  #
  # -- env variable expansion
  # We want env variables to be expanded on pressing tab instead of having the
  # `$` escaped.
  shopt -s direxpand
  #
  # Check the window size after each command and, if necessary,
  # update the values of LINES and COLUMNS.
  #
  shopt -s checkwinsize

  #
  # Activate bash completion script if present
  #
  if [ -f /etc/bash_completion ]
  then
    . /etc/bash_completion
  elif [ -f /usr/share/bash-completion/bash_completion ]
  then
    . /usr/share/bash-completion/bash_completion
  fi

  #
  # dircolors setup
  #
  if [ -x /usr/bin/dircolors ]
  then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
  fi

  #
  # make less more friendly for non-text input files, see lesspipe(1)
  #
  [ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

  #
  # Setup git things
  #
  # Activate git prompting when requisite file available
  if [ -f /usr/share/git-core/contrib/completion/git-prompt.sh ]
  then
      . /usr/share/git-core/contrib/completion/git-prompt.sh
  elif [ -f /usr/lib/git-core/git-sh-prompt ]
  then
    . /usr/lib/git-core/git-sh-prompt
  fi
  GIT_PS1_SHOWDIRTYSTATE=1

  #
  # PS1 command line customization
  #
  # Color a little for highlighting where the promt is.
  #
  # Forcing color support if possible (borrowed from ubuntu bashrc).
  if [ -x /usr/bin/tput ] && tput setaf 1 &>/dev/null
  then
    color_prompt=1
  else
    unset color_prompt
    case "$TERM" in
      xterm-color|*-256color) color_prompt=1;;
      cygwin) color_prompt=1;;
    esac
  fi

  if [ "${color_prompt}" ]
  then
    PS1='$(date +"%Y-%m-%d %T") \[\033[01;32m\]\u@\h \[\033[01;34m\]\W\[\033[00m\]$(__git_ps1 " (%s)") \$ '
  else
    PS1='$(date +"%Y-%m-%d %T") \u@\h \W$(__git_ps1 " (%s)") \$ '
  fi
  unset color_prompt

  #
  # Add ssh agent env variables if not found
  #
  if [ -n "$(command -v keychain)" ] && [ "${SSH_AGENT_PID}" = "" ]
  then
    eval $(keychain --agents ssh --eval --quiet)
  fi

  #
  # Activate nvm install if present.
  #
  export NVM_DIR="${HOME}/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
  [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

  #
  # Miniconda non-invasive activation
  #
  # Source script that adds a `conda` bash function but does not initially
  # activate any of its environments.
  #
  CONDA_INSTALL_HINTS=( "${HOME}/miniconda"
                        "${HOME}/miniconda2"
                        "${HOME}/miniconda3" )
  CONDA_SCRIPT="etc/profile.d/conda.sh"
  for INSTALL_HINT in "${CONDA_INSTALL_HINTS[@]}"
  do
    CONDA_SCRIPT_ACTUAL="${INSTALL_HINT}/${CONDA_SCRIPT}"
    if [ -f "$CONDA_SCRIPT_ACTUAL" ]
    then
      . "$CONDA_SCRIPT_ACTUAL"
      break
    fi
  done
  unset CONDA_SCRIPT CONDA_INSTALL_HINTS

  #
  # Activate virtualenvwrapper if present.
  #
  VEW_SCRIPT="${HOME}/.local/bin/virtualenvwrapper.sh"
  export WORKON_HOME="${HOME}/.python_virtualenvs"
  export VIRTUALENVWRAPPER_PYTHON="$(command -v python3)"
  if [[ -z "${VIRTUALENVWRAPPER_PYTHON}" ]]
  then
    export VIRTUALENVWRAPPER_PYTHON="$(command -v python2)"
    if [[ -z "${VIRTUALENVWRAPPER_PYTHON}" ]]
    then
      echo "WARNING: no python 2/3 available for virtualenvwrapper."
    fi
  fi
  if [[ -f "${VEW_SCRIPT}" ]] && [[ -n "${VIRTUALENVWRAPPER_PYTHON}" ]]
  then
    if [ ! -d "${WORKON_HOME}" ]
    then
      mkdir -p "${WORKON_HOME}"
    fi
    . "${VEW_SCRIPT}"
  fi
  unset VEW_SCRIPT

  # Mark this TTY as usable for GPG stuff
  export GPG_TTY=$(tty)

  #
  # Activate thefuck alias
  #
  if [ -n "$(which thefuck 2>/dev/null)" ]
  then
    eval $(thefuck --alias)
  fi

  #
  # PyENV
  #
  export PYENV_ROOT="${HOME}/.pyenv"
  if [[ -d "${PYENV_ROOT}/bin" ]]
  then
    export PATH="${PYENV_ROOT}/bin:${PATH}"
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init -)"
  fi

fi
